CREATE DATABASE RETAILs;
USE RETAILS;
use schema PUBLIC;

CREATE OR REPLACE TABLE demographic_RAW
(AGE_DESC	CHAR(20),
MARITAL_STATUS_CODE	CHAR(5),
INCOME_DESC	VARCHAR(40),
HOMEOWNER_DESC	VARCHAR(40),
HH_COMP_DESC	VARCHAR(50),
HOUSEHOLD_SIZE_DESC	VARCHAR(50),
KID_CATEGORY_DESC	VARCHAR(40),
household_key INT PRIMARY KEY
);

CREATE OR REPLACE TABLE CAMPAIGN_DESC_RAW
(DESCRIPTION CHAR(10),	
CAMPAIGN	INT ,
START_DAY	INT,
END_DAY INT,
PRIMARY KEY (DESCRIPTION),
UNIQUE (CAMPAIGN));




CREATE OR REPLACE TABLE CAMPAIGN_RAW
(DESCRIPTION	CHAR(10) ,
household_key	INT,
CAMPAIGN INT,
FOREIGN KEY (DESCRIPTION) references CAMPAIGN_DESC_RAW(DESCRIPTION) ,
FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN),
FOREIGN KEY (household_key) references demographic_RAW(household_key)
);

CREATE OR REPLACE TABLE PRODUCT_RAW
(PRODUCT_ID	INT PRIMARY KEY,
MANUFACTURER 	INT,
DEPARTMENT	VARCHAR(50),
BRAND	VARCHAR(30),
COMMODITY_DESC	VARCHAR(65),
SUB_COMMODITY_DESC VARCHAR(65)	,
CURR_SIZE_OF_PRODUCT VARCHAR(15)
);


CREATE OR REPLACE TABLE COUPON_RAW
(COUPON_UPC	INT,
PRODUCT_ID	INT,
CAMPAIGN INT,
FOREIGN KEY (PRODUCT_ID) references PRODUCT_RAW(PRODUCT_ID),
FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN)
);


CREATE OR REPLACE TABLE COUPON_REDEMPT_RAW
(household_key	INT,
DAY	INT,
COUPON_UPC	INT,
CAMPAIGN INT,
FOREIGN KEY (household_key) references demographic_RAW(household_key),
FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN)
);

CREATE OR REPLACE TABLE TRANSACTION_RAW 
(household_key	INT,
BASKET_ID	INT,
DAY	INT,
PRODUCT_ID	INT,
QUANTITY	INT,
SALES_VALUE	FLOAT,
STORE_ID	INT,
RETAIL_DISC	FLOAT,
TRANS_TIME	INT,
WEEK_NO	INT,
COUPON_DISC	INT,
COUPON_MATCH_DISC INT,
FOREIGN KEY (PRODUCT_ID) references PRODUCT_RAW(PRODUCT_ID),
FOREIGN KEY (household_key) references demographic_RAW(household_key)
);


----------------------------------------------------AWS (S3) INTEGRATION------------------------------------------------------------------------
CREATE OR REPLACE STORAGE integration s3_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN ='arn:aws:iam::441615131317:role/retailrole' 
STORAGE_ALLOWED_LOCATIONS =('s3://RetailRaw/');

DESC integration s3_int;

--------------------------------CREATE SNOWPIPE THAT RECOGNISES CSV THAT ARE INGESTED FROM EXTERNAL STAGE AND COPIES THE DATA INTO EXISTING TABLE----------------------
CREATE OR REPLACE STAGE RETAIL
URL ='s3://RetailRaw'
file_format = 'CSV'
storage_integration = s3_int;

LIST @RETAIL;
SHOW STAGES;

-- The AUTO_INGEST=true parameter specifies to read 
-- event notifications sent from an S3 bucket to an SQS queue when new data is ready to load.

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_DEMOGRAPHIC AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."DEMOGRAPHIC_RAW" --yourdatabase -- your schema ---your table
FROM '@RETAIL/DEMOGRAPHIC/' --s3 bucket subfolde4r name
FILE_FORMAT = CSV; --YOUR CSV FILE FORMAT NAME

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_CAMPAIGN_DESC AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."CAMPAIGN_DESC_RAW"
FROM '@RETAIL/CAMPAIGN_DESC/' 
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_CAMPAIGN AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."CAMPAIGN_RAW"
FROM '@RETAIL/CAMPAIGN/' 
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_PRODUCT AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."PRODUCT_RAW"
FROM '@RETAIL/PRODUCT/' 
FILE_FORMAT = CSV;


CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_COUPON AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."COUPON_RAW"
FROM '@RETAIL/COUPON/' 
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_COUPON_REDEMPT  AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."COUPON_REDEMPT_RAW"
FROM '@RETAIL/COUPON_REDEMPT/' 
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_TRANSACTION  AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."TRANSACTION_RAW"
FROM '@RETAIL/TRANSACTION/' 
FILE_FORMAT = CSV;

SHOW PIPES;

SELECT COUNT(*) FROM demographic_RAW;
SELECT COUNT(*) FROM CAMPAIGN_DESC_RAW;
SELECT COUNT(*) FROM CAMPAIGN_RAW;
SELECT COUNT(*) FROM PRODUCT_RAW;
SELECT COUNT(*) FROM COUPON_RAW;
SELECT COUNT(*) FROM COUPON_REDEMPT_RAW;
SELECT COUNT(*) FROM TRANSACTION_RAW;

----------------------------------------------------------PIPEREFRESH-----------------------------------------------------------------

ALTER PIPE RETAIL_SNOWPIPE_DEMOGRAPHIC refresh;
ALTER PIPE  RETAIL_SNOWPIPE_CAMPAIGN_DESC refresh;
ALTER PIPE  RETAIL_SNOWPIPE_CAMPAIGN refresh;
ALTER PIPE  RETAIL_SNOWPIPE_PRODUCT refresh;
ALTER PIPE  RETAIL_SNOWPIPE_COUPON refresh;
ALTER PIPE  RETAIL_SNOWPIPE_COUPON_REDEMPT refresh;
ALTER PIPE  RETAIL_SNOWPIPE_TRANSACTION refresh;



SELECT * FROM demographic_RAW;
SELECT * FROM CAMPAIGN_DESC_RAW;
SELECT * FROM CAMPAIGN_RAW;
SELECT * FROM PRODUCT_RAW;
SELECT * FROM COUPON_RAW;
SELECT * FROM COUPON_REDEMPT_RAW;
SELECT * FROM TRANSACTION_RAW;


-- CELANING THE DATA/ HANDLING NULL VALUES BY REPLACING WITH DEFAULT VALUES

UPDATE PRODUCT_RAW
SET DEPARTMENT = 'Unknown'
WHERE DEPARTMENT IS NULL;

UPDATE PRODUCT_RAW
SET COMMODITY_DESC = 'Unknown'
WHERE COMMODITY_DESC IS NULL;

UPDATE PRODUCT_RAW
SET SUB_COMMODITY_DESC = 'Unknown'
WHERE SUB_COMMODITY_DESC IS NULL;

UPDATE PRODUCT_RAW
SET CURR_SIZE_OF_PRODUCT = 'Not Specified'
WHERE CURR_SIZE_OF_PRODUCT IS NULL;

select * from product_raw;


/*1. Customer Demographics KPIs:
a. Count of unique households: Measure the total number of unique households in
the Demographic table.
b. Household composition distribution: Analyze the distribution of household
compositions (HH_COMP_DESC) to understand the composition of households.
c. Age distribution: Calculate the percentage or count of customers in different age
groups (AGE_DESC).
d. Marital status distribution: Analyze the proportion of customers in different
marital status categories (MARITAL_STATUS_CODE).
e. Income distribution: Determine the distribution of customers across income levels
(INCOME_DESC).
f. Homeownership distribution: Calculate the percentage or count of customers who
own or rent their homes (HOMEOWNER_DESC)*/

SELECT * FROM DEMOGRAPHIC_RAW;

SELECT COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_NUMBER_OF_HOUSEHOLDS FROM DEMOGRAPHIC_RAW; 
 
SELECT HH_COMP_DESC,COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLD 
FROM DEMOGRAPHIC_RAW 
GROUP BY HH_COMP_DESC 
ORDER BY TOTAL_HOUSEHOLD;

SELECT AGE_DESC , COUNT(*) 
FROM DEMOGRAPHIC_RAW
GROUP BY AGE_DESC
ORDER BY 2;

SELECT MARITAL_STATUS_CODE,COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLD,
ROUND(COUNT(DISTINCT HOUSEHOLD_KEY)/2500*100,2) AS PERCENTAGE_COUNT_DIST
FROM DEMOGRAPHIC_RAW
GROUP BY MARITAL_STATUS_CODE
ORDER BY TOTAL_HOUSEHOLD,PERCENTAGE_COUNT_DIST;


SELECT INCOME_DESC,COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLD,
ROUND(COUNT(DISTINCT HOUSEHOLD_KEY)/2500*100,2) AS DIST_OF_CUSTOMER
FROM DEMOGRAPHIC_RAW
GROUP BY INCOME_DESC
ORDER BY TOTAL_HOUSEHOLD,DIST_OF_CUSTOMER;


SELECT HOMEOWNER_DESC,COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLD,
ROUND(COUNT(DISTINCT HOUSEHOLD_KEY)/2500*100,2) AS PERCEN_CUST_COUNT
FROM DEMOGRAPHIC_RAW
GROUP BY HOMEOWNER_DESC
ORDER BY TOTAL_HOUSEHOLD,PERCEN_CUST_COUNT;

/*2. Campaign KPIs:
a. Number of campaigns: Count the total number of campaigns in the Campaign
table.
b. Campaign duration: Calculate the duration of each campaign by subtracting the
start day from the end day (in the Campaign_desc table).
c. Campaign effectiveness: Analyze the number of households associated with each
campaign (in the Campaign table) to measure campaign reach.*/

SELECT * FROM CAMPAIGN_RAW;
SELECT * FROM CAMPAIGN_DESC_NEW;

SELECT COUNT(DISTINCT CAMPAIGN) AS TOTAL_CAMPAIGN FROM CAMPAIGN_RAW;

SELECT DESCRIPTION , CAMPAIGN ,SUM(END_DATE - START_DATE)  AS CAMP_DURATION
FROM CAMPAIGN_DESC_NEW
GROUP BY DESCRIPTION , CAMPAIGN
ORDER BY CAMP_DURATION DESC;

SELECT CAMPAIGN, COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLD
FROM CAMPAIGN_RAW 
GROUP BY CAMPAIGN
ORDER BY TOTAL_HOUSEHOLD DESC;

/*3. Coupon KPIs:
a. Coupon redemption rate: Calculate the percentage of coupons redeemed (from the
coupon_redempt table) compared to the total number of coupons distributed (from
the Coupon table).
a. Coupon usage by campaign: Measure the number of coupon redemptions (from
the coupon_redempt table) for each campaign (in the Coupon table).*/

SELECT * FROM COUPON_RAW;
SELECT * FROM COUPON_REDEMPT_NEW;



SELECT C.PRODUCT_ID,
COUNT(DISTINCT CR.COUPON_UPC) AS TOTAL_COUPONS_REDEEMED,
COUNT(DISTINCT C.COUPON_UPC) AS TOTAL_COUPONS_DISTRIBUTED,
ROUND(COUNT(DISTINCT CR.COUPON_UPC) * 100.0 / NULLIF(COUNT(DISTINCT C.COUPON_UPC), 0), 2) AS COUPON_REDEMPTION_PERCENTAGE
FROM COUPON_REDEMPT_NEW AS CR
RIGHT JOIN COUPON_RAW AS C ON C.COUPON_UPC = CR.COUPON_UPC
GROUP BY C.PRODUCT_ID
ORDER BY COUPON_REDEMPTION_PERCENTAGE DESC;


SELECT CAMPAIGN,
COUNT(DISTINCT COUPON_UPC) AS TOTAL_COUPONS_REDEEMED
FROM COUPON_REDEMPT_NEW 
GROUP BY CAMPAIGN
ORDER BY COUPON_REDEMPTION_PERCENTAGE DESC;


/*4. Product KPIs:
a. Sales value: Calculate the total sales value for each product (in the
Transaction_data table) to identify top-selling products.
b. Manufacturer distribution: Analyze the distribution of products across different
manufacturers (in the Product table).
c. Department-wise sales: Measure the sales value by department (in the Product
table) to understand which departments contribute most to revenue.
d. Brand-wise sales: Calculate the sales value for each brand (in the Product table) to
identify top-selling brands.*/

SELECT * FROM PRODUCT_RAW;
SELECT * FROM TRANSACTION_NEW;

SELECT P.PRODUCT_ID , P.COMMODITY_DESC,SUM(T.SALES_VALUE) AS TOTAL_SALES_VALUE
FROM PRODUCT_RAW AS P
JOIN TRANSACTION_NEW AS T ON P.PRODUCT_ID = T.PRODUCT_ID
GROUP BY P.PRODUCT_ID , P.COMMODITY_DESC
ORDER BY TOTAL_SALES_VALUE DESC;

SELECT MANUFACTURER,DEPARTMENT,BRAND,COMMODITY_DESC, COUNT(DISTINCT PRODUCT_ID) AS TOTAL_PRODUCT
FROM PRODUCT_RAW
GROUP BY MANUFACTURER,DEPARTMENT,BRAND,COMMODITY_DESC
ORDER BY 1,2 DESC;


SELECT P.DEPARTMENT, 
SUM(T.SALES_VALUE) AS TOTAL_SALES_VALUE
FROM PRODUCT_RAW AS P
JOIN TRANSACTION_NEW AS T ON  P.PRODUCT_ID = T.PRODUCT_ID
GROUP BY P.DEPARTMENT
ORDER BY TOTAL_SALES_VALUE DESC;

SELECT P.BRAND, 
SUM(T.SALES_VALUE) AS TOTAL_SALES_VALUE
FROM PRODUCT_RAW AS P
JOIN TRANSACTION_NEW AS T ON  P.PRODUCT_ID = T.PRODUCT_ID
GROUP BY P.BRAND
ORDER BY TOTAL_SALES_VALUE DESC;


/*5. Transaction KPIs:
a. Total sales value: Calculate the sum of sales values (in the Transaction_data table)
to measure overall revenue.
b. Average transaction value: Calculate the average sales value per transaction to
understand customer spending patterns.
c. Quantity sold: Measure the total quantity sold (in the Transaction_data table) to
understand product demand.
d. Discounts: Analyze the amount and impact of discounts (RETAIL_DISC,
COUPON_DISC, COUPON_MATCH_DISC) on sales value.*/

SELECT * FROM TRANSACTION_NEW;

SELECT SUM(SALES_VALUE) AS TOTAL_SALES_VALUE
FROM TRANSACTION_NEW;

SELECT DEPARTMENT,
ROUND(SUM(T.SALES_VALUE) / 2500, 2) AS AVG_TRANSACTION_VALUE
FROM TRANSACTION_NEW T
JOIN PRODUCT_RAW P ON T.PRODUCT_ID = P.PRODUCT_ID
GROUP BY DEPARTMENT
ORDER BY AVG_TRANSACTION_VALUE DESC;


SELECT P.DEPARTMENT, P.COMMODITY_DESC,
ROUND(SUM(T.QUANTITY), 0) AS TOTAL_QUANTITY_SOLD
FROM TRANSACTION_NEW T
JOIN PRODUCT_RAW P ON T.PRODUCT_ID = P.PRODUCT_ID
GROUP BY P.DEPARTMENT, P.COMMODITY_DESC
ORDER BY TOTAL_QUANTITY_SOLD DESC;


SELECT 
SUM(RETAIL_DISC) AS TOTAL_RETAIL_DISCOUNT,
SUM(COUPON_DISC) AS TOTAL_COUPON_DISCOUNT,
SUM(COUPON_MATCH_DISC) AS TOTAL_COUPON_MATCH_DISCOUNT,
ROUND(SUM(RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC), 2) AS TOTAL_DISCOUNT,
SUM(SALES_VALUE) AS TOTAL_SALES_VALUE,
CASE 
    WHEN SUM(SALES_VALUE) = 0 THEN 0
    ELSE ROUND(SUM(RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC) / SUM(SALES_VALUE) * 100, 2)
    END AS DISCOUNT_IMPACT_PERCENTAGE
FROM TRANSACTION_NEW;


CREATE OR REPLACE PROCEDURE Household_kpi()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
-- Create the table
  EXECUTE IMMEDIATE '
    CREATE TABLE Household_kpi AS
    SELECT T.HOUSEHOLD_KEY, D.AGE_DESC, D.MARITAL_STATUS_CODE, D.INCOME_DESC,
      AVG(T.SALES_VALUE) AS AVG_AMOUNT,
      AVG(T.RETAIL_DISC) AS AVG_RETAIL_DIS,
      AVG(T.COUPON_DISC) AS AVG_COUPON_DISC,
      AVG(T.COUPON_MATCH_DISC) AS AVG_COUP_MATCH_DISC
    FROM TRANSACTION_NEW T
    LEFT OUTER JOIN demographic_RAW D ON T.HOUSEHOLD_KEY = D.HOUSEHOLD_KEY
    GROUP BY 1, 2, 3, 4
    ORDER BY 1;
  ';
  RETURN 'Procedure executed successfully';
END;
$$;

SHOW PROCEDURES;

CALL HOUSEHOLD_KPI();

----------------------------------------------Creating an Auto Refresh for Snowpipe from S3 Bucket(Schedule Refreshjob) in Snowflake---------------------------------
CREATE OR REPLACE PROCEDURE refresh_pipe()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
    -- Refresh the specified pipe
    ALTER PIPE retail_pipe_auto_ingest REFRESH;

    -- Return a success message
    RETURN 'Pipe refreshed successfully';
END;
$$;

CREATE OR REPLACE TASK refresh_pipe_task
WAREHOUSE = COMPUTE_WH
SCHEDULE = 'USING CRON 0 9 1-7 * 1 UTC'  -- First Monday of every month at 9 AM UTC
AS
CALL refresh_pipe();

ALTER TASK   refresh_pipe_task RESUME;
ALTER TASK  refresh_pipe_task SUSPEND; 


